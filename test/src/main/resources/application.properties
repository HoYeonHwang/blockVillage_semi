server.address=localhost
server.port=8081

# API 호출시, SQL 문을 콘솔에 출력한다.
spring.jpa.show-sql=true

# DDL 정의시 데이터베이스의 고유 기능을 사용합니다.
# ex) 테이블 생성, 삭제 등
spring.jpa.generate-ddl=true

# MySQL 을 사용할 것.
spring.jpa.database=mysql

# MySQL 설정
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://127.0.0.1:3306/practice_dev_db?serverTimezone=UTC&useUniCode=yes&characterEncoding=UTF-8
spring.datasource.username=ssafy
spring.datasource.password=ssafy

# MySQL 상세 지정
spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect
#프로젝트 기동 시 엔티티 클래스를 바탕으로 테이블을 생성합니다. 만약 테이블이 이미 존재한다면 삭제하고 다시 생성합니다.
spring.jpa.hibernate.ddl-auto=update
#Spring Data JPA가 제안하는 인터페이스를 상속한 클래스가 있으니 처리하라고 요청합니다.
#spring.data.jpa.repositories.enabled=true
#하이버네이트가 실행하는 모든 SQL문을 콘솔로 출력해 준다.
spring.jpa.properties.hibernate.show_sql=true 
# 콘솔에 출력되는 JPA 실행 쿼리를 가독성있게 표현한다.
spring.jpa.properties.hibernate.format_sql=true 
# 디버깅이 용이하도록 SQL문 이외에 추가적인 정보를 출력해 준다.
spring.jpa.properties.hibernate.use_sql_comments=true

logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE